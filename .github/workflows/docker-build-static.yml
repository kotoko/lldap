name: Docker Static

on:
  push:
    branches:
      - 'main'
  release:
    types:
      - 'published'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      msg:
        description: "Set message"
        default: "Manual trigger"

env:
  CARGO_TERM_COLOR: always

# In total 5 jobs, all of the jobs are containerized
# ---

# build-ui , create/compile the web
## Use rustlang/rust:nighlty image
### Install nodejs from nodesource repo
### install wasm
### install rollup
### run app/build.sh
### upload artifacts

# builds-armhf, build-aarch64, build-amd64 create binary for respective arch
## Use rustlang/rust:nightly image
### Add non native architecture dpkg --add-architecture XXX
### Install dev tool gcc g++, etc per respective arch
### Cargo build
### Upload artifacts

## the CARGO_ env
#CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
# This will determine which architecture lib will be used.

# build-ui,builds-armhf, build-aarch64, build-amd64 will upload artifacts will be used next job
# build-docker-image job will fetch artifacts and run Dockerfile.ci then push the image.

# On current https://hub.docker.com/_/rust
# 1-bullseye, 1.61-bullseye, 1.61.0-bullseye, bullseye, 1, 1.61, 1.61.0, latest

# cache
## cargo
## target

jobs:
  build-ui:
    runs-on: ubuntu-latest
    container:
      image: rust:1.68
      env:
        CARGO_TERM_COLOR: always
        RUSTFLAGS: -Ctarget-feature=+crt-static
    steps:
      - name: install runtime
        run: apt update && apt install -y gcc-x86-64-linux-gnu g++-x86-64-linux-gnu libc6-dev ca-certificates
      - name: setup node repo LTS
        run: curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
      - name: install nodejs
        run: apt install -y nodejs && npm -g install npm
      - name: smoke test
        run: rustc --version
      - uses: actions/cache@v3
        with:
          path: |
            /usr/local/cargo/bin
            /usr/local/cargo/registry/index
            /usr/local/cargo/registry/cache
            /usr/local/cargo/git/db
            target
          key: lldap-ui-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            lldap-ui-
      - name: Checkout repository
        uses: actions/checkout@v3.1.0
      - name: install rollup nodejs
        run: npm install -g rollup
      - name: Add wasm target (rust)
        run: rustup target add wasm32-unknown-unknown
      - name: install wasm-pack with cargo
        run: cargo install wasm-pack || true
        env:
          RUSTFLAGS: ""
      - name: build frontend
        run: ./app/build.sh
      - name: check path
        run: ls -al app/
      - name: upload ui artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ui
          path: app/


  build-amd64:
    runs-on: ubuntu-latest
    container:
#      image: rust:1.62
      image: nitnelave/rust-dev:latest
      env:
        CARGO_TERM_COLOR: always
        RUSTFLAGS: -Ctarget-feature=+crt-static
        CARGO_HOME: ${GITHUB_WORKSPACE}/.cargo
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: x86_64-linux-musl-gcc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.1.0
      - uses: actions/cache@v3
        with:
          path: |
            .cargo/bin
            .cargo/registry/index
            .cargo/registry/cache
            .cargo/git/db
            target
          key: lldap-bin-amd64-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            lldap-bin-amd64-
      - name: install musl
        run: apt update && apt install -y musl-tools tar wget
#      - name: fetch musl-gcc
#        run: |
#             wget -c https://musl.cc/x86_64-linux-musl-cross.tgz
#             tar zxf ./x86_64-linux-musl-cross.tgz -C /opt
#             echo "/opt/x86_64-linux-musl-cross:/opt/x86_64-linux-musl-cross/bin" >> $GITHUB_PATH
      - name: add x86_64 target
        run: rustup target add x86_64-unknown-linux-musl
      - name: build x86_64 lldap
        run: cargo build --target=x86_64-unknown-linux-musl --release -p lldap -p migration-tool
      - name: check path
        run: ls -al target/x86_64-unknown-linux-musl/release/
      - name: upload amd64 lldap artifacts
        uses: actions/upload-artifact@v3
        with:
          name: amd64-lldap-bin
          path: target/x86_64-unknown-linux-musl/release/lldap
      - name: upload amd64 migration-tool artifacts
        uses: actions/upload-artifact@v3
        with:
          name: amd64-migration-tool-bin
          path: target/x86_64-unknown-linux-musl/release/migration-tool


